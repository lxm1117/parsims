========================================
pDE-v1.0 log started on 2015-01-28 20:27:24

Files & environment --------------
     input_file >>/home/ximi/Projects/ParSims/reduced-passive.pDE<<
        Tmp-dir >>/home/ximi/MyTemp<<
           HOME >>/home/ximi<<
            PWD >>/home/ximi/Projects/ParSims<<

Processes ----------
rank      pid                hostname
   0     6640 trestles-login2.sdsc.edu

pDE job spec ----------
===== Fit >>072006b<<
           seed   191
         genmax   200
            NpD   10
       strategy   3
              F   0.85
             CR   1
   var_lim_stgy   randE
       hoc_main   /home/ximi/Projects/ParSims/reduced-passive.hoc
abort_on_eval_error   0
          nBest   1
         Fit-SA   Pop_f 0 Best_Rad_Pcnt 0

Pop-init uniform noset

   == Fit-case >>072006b-2ms+375pA<<
       template   eMatch    
           func   dfc_eD.m0(dfc_simL_i.o(0),dfc_tgt_i)
          scale   4*dfc_PassWgt*100/tstop
        hoc_var   soma      
     hoc_before   dfc_set_stims_etc(375/1000,2,5)
      hoc_after   dfc_sim_BBF()
      tgt_files   2:/home/ximi/Projects/ParSims/from_axon_new/htf_files/2ms+375pA.htf
     tgt_before   blMax=4   
      tgt_after   dfc_set_tgt(375/1000,2,21,136,16)

   == Fit-case >>072006b-20ms+50pA<<
       template   eMatch    
           func   dfc_eD.m0(dfc_simL_i.o(0),dfc_tgt_i)
          scale   2*dfc_PassWgt*100/tstop
        hoc_var   soma      
     hoc_before   dfc_set_stims_etc(50/1000,20,5)
      hoc_after   dfc_sim_BBF()
      tgt_files   2:/home/ximi/Projects/ParSims/from_axon_new/htf_files/20ms+50pA.htf
     tgt_before   blMax=4   
      tgt_after   dfc_set_tgt(50/1000,20,21,120,16)

   == Fit-case >>072006b-20ms-50pA<<
       template   eMatch    
           func   dfc_eD.m0(dfc_simL_i.o(0),dfc_tgt_i)
          scale   2*dfc_PassWgt*100/tstop
        hoc_var   soma      
     hoc_before   dfc_options_all();dfc_set_stims_etc(-50/1000,20,5)
      hoc_after   dfc_sim_BBF()
      tgt_files   2:/home/ximi/Projects/ParSims/from_axon_new/htf_files/20ms-50pA.htf
     tgt_before   blMax=4   
      tgt_after   dfc_set_tgt(-50/1000,20,21,120,16)

   == Fit-case >>072006b-20ms-200pA<<
       template   eMatch    
           func   dfc_eD.m0(dfc_simL_i.o(0),dfc_tgt_i)
          scale   8.3*dfc_PassWgt*100/tstop
        hoc_var   soma      
     hoc_before   dfc_options_all();dfc_set_stims_etc(-200/1000,20,5)
      hoc_after   dfc_sim_BBF()
      tgt_files   2:/home/ximi/Projects/ParSims/from_axon_new/htf_files/20ms-200pA.htf
     tgt_before   blMax=4   
      tgt_after   dfc_set_tgt(-200/1000,20,21,120,16)

Fit-lims >><<

            hoc_name       init         lims
Set-parm
         dfc_PassWgt          1          0:1         
     RmCm_spine_gbar          0          0:1         
        Spine_number      30000          0:40000     
              BL_avg   -74.3052        -80:-60       
                 BBF        1.6          0:20        
            BBFdelay          0          0:0.1       
          lambda_f_d        0.1        0.1:2         
                G_eh        -30        -40:-10       
             celsius         35         22:37        
           aX_iseg_n          2         11:50        
         s0_Gbar_Naf        500         80:1000      
        aXh_Gbar_Naf        500        100:7000      
       aXi0_Gbar_Naf       2500        100:8500      
       aXi1_Gbar_Naf       3500        100:8000      
        aXr_Gbar_Naf       3000       1000:5000      
        aXm_Gbar_Naf         50         10:100       
      gates_n_Naf_i0          1          1:3         
      vhalf_n_Naf_i0        -30        -45:-25       
      slope_n_Naf_i0       -4.8        -10:-3        
       tauA_n_Naf_i0       0.01     0.0001:0.01      
       tauG_n_Naf_i0        0.8       0.03:0.97      
      vhalf_h_Naf_i0        -64        -68:-48       
      slope_h_Naf_i0       9.06          5:15        
       tauA_h_Naf_i0          8          5:50        
       tauG_h_Naf_i0        0.5        0.2:0.8       
      gates_n_Naf_i1          1          1:3         
      vhalf_n_Naf_i1        -35        -58:-35       
      slope_n_Naf_i1         -5        -10:-3        
       tauA_n_Naf_i1       0.01     0.0001:0.01      
       tauG_n_Naf_i1        0.5       0.03:0.97      
      vhalf_h_Naf_i1        -67        -68:-55       
      slope_h_Naf_i1          9          3:15        
       tauA_h_Naf_i1          8          5:50        
         s0_Gbar_KDR        200         80:7000      
        aXh_Gbar_KDR        200        100:7000      
       aXi0_Gbar_KDR       1500        100:7000      
       aXi1_Gbar_KDR       2000        100:7000      
        aXm_Gbar_KDR          5        0.1:100       
        aXr_Gbar_KDR        800         10:1000      
     Gbar_KDR_dslope          0          0:0.008     
      gates_n_KDR_i1          1          1:4         
      vhalf_n_KDR_i1          2        -19:10        
      slope_n_KDR_i1        -13        -15:-6        
       tauA_n_KDR_i1          8          1:50        
       tauG_n_KDR_i1        0.9       0.03:0.97      
       vhalf_n_KA_i1        -30        -35:5         
       slope_n_KA_i1        -10        -40:-5        
        tauA_n_KA_i1          1        0.1:30        
      vhalfD_h_KA_i1        -35        -60:-20       
       slope_h_KA_i1         10          3:20        
        tauA_h_KA_i1         20         31:150       
      Gbar_KA_dslope      0.008     0.0001:0.03      
       Gbar_h_dslope      0.008     0.0001:0.03      
        gates_n_h_i0          1          1:3         
        vhalf_n_h_i0     -92.07       -110:-70       
        slope_n_h_i0         10          4:12        
         tauA_n_h_i0        100         10:100       
         tau0_n_h_i0      0.001      0.001:0.1       
         tauF_n_h_i0          0       -3.5:2         
         tauG_n_h_i0        0.5       0.05:0.95      
        tauDv_n_h_i0          0        -55:55        
Fit-parm
                G_Rm  1        200         10:400       
                G_cm  2     0.9626       0.25:2.5       
                G_Ra  3         45          2:150       
            Gbar_Naf  4         50         10:300       
            Gbar_KDR  5         28         10:1000      
             Gbar_KA  6          2          1:100       
              Gbar_h  7     0.1058       0.01:4         
Subs-parm

------VERBATIM---------
cell_file_name="n400td-pc2-sp-axn.hoc"

obfunc dfc_set_stims_etc(){
  print "check pDE dfc_set_stims++++++++++++++++++++"
 /*
  if(vdef("aX_hill_nseg"))\
    execute( "if(axon_hill.nseg<aX_hill_nseg) axon_hill.nseg=aX_hill_nseg" )
  if(vdef("aX_iseg_nseg")) \
    execute( "for i=0,aX_iseg_n-1 {if(axon_iseg[i].nseg<aX_iseg_nseg) axon_iseg[i].nseg= aX_iseg_nseg }" )
  if(vdef("aX_prox_nseg")) \
    execute( "for i=0,aX_prox_n-1 {if(axon_prox[i].nseg<aX_prox_nseg) axon_prox[i].nseg= aX_prox_nseg }" )
  if( vdef("aX_mnode_nseg" )) \
    execute( "forsec \"mnode\" if(nseg<aX_mnode_nseg) nseg= aX_mnode_nseg" )
  */
//  execute( "axon_prox.nseg = aX_prox_nseg" )
//  execute( "for i=0,aX_iseg_n-1 {axon_iseg[i].nseg= aX_iseg_nseg }" )
  stim.amp=$1
  stim.dur=$2
  stim.del=$3
  print "check stim.del +++++++++++++++++++++++++++"
  dfc_options_all( dfc_eD )
  return stim
}

obfunc dfc_set_tgt(){
  print "dfc_set_tgt()+++++++++++++++++++++++++++"
  dfc_tgt.stim_amp=$1
  dfc_tgt.stim_dur=$2
  dfc_tgt.stim_del=$3
  if( numarg()>3 ) dfc_tgt.cut_at2($4,$5)
  return dfc_tgt
}

proc dfc_sim_BBF(){
  dfc_simL_i.o(0).dc_shift(stim.del+BBFdelay,stim.del+stim.dur+BBFdelay,-BBF*stim.amp)
}

//================================================================================
// New stuff for pkbeg posfix

obfunc dfc_seg_look_options(){ local i localobj dI
  dI = new eMatch() if( numarg()>0)dI =$o1
  dI.seg_option	= 1101
  dI.seg_dt	= 0.09
  dI.seg_slp_dt	= 0.09
  dI.seg_slp_th	= 10
  dI.seg_v_th	= 0
  dI.seg_tiny_last	= 0
  if( strcmp(dfc_i.id,"072006b-2ms+1500pA-pkbeg") == 0 ){ dI.seg_dt=dI.seg_slp_dt= 0.02 }
  return dI
}

obfunc dfc_options_all(){ local i localobj eD
  if( numarg()==0 ) eD = dfc_seg_look_options()
  if( numarg()> 0 ) eD = dfc_seg_look_options($o1)

  eD.match_option	= 5.2
  eD.alpha = eD.beta = eD.gamma = eD.delta = eD.eta = eD.mF1 = eD.mF2 = eD.pkP = eD.pkPs = 0

  eD.ilog = 1
  return eD
}

// rough match to train; 
// necessary to avoid traces that don't return to baseline
// also check spikes also appear in axon
func dfc_trim(){ local i, t0_tail, f1, f2, r1, r2, res localobj eD
  f1=$1   f2=$2

  eD = dfc_options_all(dfc_eD)
  eD.eta 		= 1
  eD.mF2		= 200
  eD.pkP		= 1500*5
  eD.pkPs		= 1
  eD.pkPsA		= 1
  
  t0_tail = stim.del + stim.dur		// end of stimulus

  eD.tmin = t0_tail			// compare tails after end stimulus: axon vs tgt
  r2 = eD.m0( dfc_simL_i.o(1), dfc_tgt_i ) 

  eD.tmin = 0
  printf( "\n\t >>dfc_trim: DfpwPkdVa_aXe: " )
  r1 = eD.DfpwPkdVa_aXe(dfc_simL_i,dfc_tgt_i,-1,-1)	// 800=8.90, 400=15.2, 200=30.82, 1500=6.7  
  
  res = r1*f1 + r2*f2
  printf( "\n\t dfc_trim t0_tail %g r1,2 %g %g f1,f2 %g %g ri*fi %g %g\n\t res %g<<\n",\
  t0_tail, r1,r2, f1,f2, r1*f1, r2*f2, res )
  return res
}

//================================================================================
// match first spike (up to tmax)
// gamma and delta to match dV and ddV; largely independent of trace length/stim.amp
// eta scaled by trace length
//================================================================================
func dfc_pkbeg(){ local i, tmax, dV_f, eta_f, r1 localobj eD
  tmax = $1
  
  dV_f = 45*2
  eta_f = 300 + 100/(tmax-stim.del-1.1)	//  A + B/(time from stim.del to base of spike) A=for spike; B for before spike

  eD = dfc_eD //  eD = dfc_options_all(dfc_eD)
  // eD.mF2	= 200*10
  eD.mF2        = 6000 * stim.amp       // peak time error proportional to stimulation amplitude  
  eD.pkP        = 1500*5
  eD.pkPs	= 1
  eD.phi	= 600/116/10 	// range_dV/range_V	old=0.4 * 10
  eD.phi_1 	= 0.5+0.15
  eD.phi_2 	= 0.45-0.02
  eD.chi	= 1000/116/100	// range_ddV/range_V 	old=0.02 * 8
  eD.chi_1  	= 0.5+0.15	
  eD.chi_2 	= 0.15	
  if( numarg()>1) eD.chi_2=$2   // adhoc inserted to override
  eD.phi*=dV_f eD.chi*=dV_f

  eD.eta	= eta_f	
  // eD.mF2=0   eD.pkP=1000*eta_f	// for initial pop for Naf & KDR parms

  eD.tmax	= tmax
  printf( "\n\t >>dfc_pkbeg: DfpwPkdVa: " )
  r1 = eD.DfpwPkdVa(dfc_simL_i.o(0),dfc_tgt_i)	// 800=8.90, 400=15.2, 200=30.82, 1500=6.7  
  printf( "\n\t dfc_pkbeg: r1 %g \n\t<<\n", r1 )
  return r1
}


------ENDVERBATIM-------
------hoc_main--->>/home/ximi/Projects/ParSims/reduced-passive.hoc<<---------------
// Initialize
{ 
  //  load_file( "eTrace-p.hoc", "eTrace_loaded" ) 
  chdir("/home/ximi/Projects/ParSims")
  load_file( "eTrace-p.hoc", "eTrace_loaded" ) 
  load_file( "stdrun.hoc" )
  load_file( "eMorph-p.hoc" )
  load_file( "do_log.hoc" )
}

  nrn_load_dll("/home/ximi/Projects/ParSims/from_axon_new/ca1n1-mod/x86_64/.libs/libnrnmech.so" )


//================================================================================
func vdef(){
  if( name_declared( $s1 ) == 5 ) return 1
  return 0
}
//================================================================================
func Boltz(){
  return 1/(1+exp(($1-$2)/$3))
}

func max(){ local i, im
  im = $1
  for i=1, numarg() if( $i>im ) im = $i
  return im
}

func GaussLike(){ // x, A, W, D
  return $2*exp(-($1-$4)^2/$3 )
}

// Perpendicular y distance
func ydistP(){
 // if(ismembrane("morpho")){
 //	return abs(0.5*(y0_morpho+y1_morpho))
 // }else { return abs( y3d(0)+y3d(n3d()-1) )/2}
 return distance(0.5)
}

//================================================================================
objref eM
eM = new eMorph()
eM.idebug = 1
dfc_idebug = 0

proc mulfit_cell_init() { 
  soma { distance() }	// set soma(0.5) as reference point
  //adj_e_pas = G_e_pas - G_e_pas_slope * tgt_bldiff
  //printf( "adj_e_pas %g G_e_pas %g G_e_pas_slope %g tgt_bldiff %g\n", adj_e_pas, G_e_pas, G_e_pas_slope, tgt_bldiff )
  forall {
    do_pas()
    do_Naf()      // does Naf and Nav16
    do_h()
    do_KDR()
    do_KA()
  }



//  if( vdef( "RmCm_spine_gbar")) execute("eM.RmCm_spine_gbar = RmCm_spine_gbar")  // defaults to 0 in template
  Spnum = 30000
  if( vdef( "Spine_number"))  Spnum = Spine_number
  eM.Spine_Comp_RmCm_f3d( "n400_af3d", Spnum )		// We perform Spine compensation after all else is set.
  //eM.use_morpho_xyz=1
  //eM.Spine_Comp_RmCm_n400_JAI(Spnum)

  eM.idebug = 0						// show debug info only on first run
  set_nseg( lambda_f_d )
	//axon_hill {
	//	diam(0:1)=soma.diam(1):diam(0)
	//}
}

//--------------------------------------------------------------------------------
proc set_nseg(){ local ns, lfd 
  nseg_tot = 0
  lfd = $1
  soma area( 0.5 )
  forall { 
    if( lfd <= 0 ) ns = 1
    if( lfd >  0 ) ns = int((L/($1 *lambda_f(100))+.9)/2)*2 + 1 
    if( ns > nseg ) nseg = ns
    nseg_tot += nseg
  }
  printf( "lambda-d %g nseg_tot %d\n", lfd, nseg_tot )
}

//--------------------------------------------------------------------------------
proc do_pas(){
  if( !ismembrane("epasn") ) insert epasn
  //e_pas	= adj_e_pas
  g_epasn = 1 / ( G_Rm * 1000 )
  Ra	= G_Ra//*1000
  cm	= G_cm

  ifsec "soma" {
    if( vdef( "soma_l"))     L=soma_l
    if( vdef( "soma_diam"))  diam=soma_diam	
    if( vdef( "soma_cm" )) cm	= soma_cm
    if( vdef( "soma_Rm" )) g_epasn	= 1/ ( soma_Rm * 1000 )
    if( vdef( "soma_Ra" )) Ra	= soma_Ra//*1000
  }
  ifsec "axon" {		// aX_ => generic for all axons but Hillock
    if( vdef( "aX_cm" )) cm	= aX_cm
    if( vdef( "aX_Rm" )) g_epasn	= 1/ ( aX_Rm * 1000 )
    if( vdef( "aX_Ra" )) Ra	= aX_Ra//*1000
  }
  ifsec "axon_mnode" {		// aXm_ special for myelin can override generic
    if( vdef("aXm_cm"))	cm	= aXm_cm
    if( vdef("aXm_Rm"))	g_epasn	= 1/ ( aXm_Rm * 1000 )
    if( vdef("aXm_Ra"))	Ra	= aXm_Ra//*1000
  }
  ifsec "axon_inode" {		// aXr_ special for nodes of Ranvier can override generic
    if( vdef("aXr_cm"))	cm	= aXr_cm
    if( vdef("aXr_Rm"))	g_epasn	= 1/ ( aXr_Rm * 1000 )
    if( vdef("aXr_Ra"))	Ra	= aXr_Ra//*1000
  }
  ifsec "axon_iseg[0]" {	
	//if(vdef("aX_iseg_l")) L=aX_iseg_l*0.5
	L=30
	diam=1
  }
  ifsec "axon_iseg[1]" {
	//if(vdef("aX_iseg_l")) L=aX_iseg_l*0.5
	L=40
	diam=1
  }
  ifsec "axon_hill" {
	if(vdef("axon_hill_l")){ 
		L=axon_hill_l
	}else{L=5}
	diam(0:1)=2.8:1
  }
}
//--------------------------------------------------------------------------------

proc do_Naf(){
  if( vdef( "Gbar_Naf" )){
    if( !ismembrane("Naf_i0")) insert Naf_i0

    nai0_na_ion = 10
    nao0_na_ion = 145       
    nai=nai0_na_ion
    nao=nao0_na_ion
    ena=nernst(nai0_na_ion, nao0_na_ion,1)

    gbar_Naf_i0 = Gbar_Naf	// default value unless overriden below
 
    ifsec "soma" 	if(vdef("s0_Gbar_Naf"))		gbar_Naf_i0 	= s0_Gbar_Naf
    ifsec "axon_hill" 	if(vdef("aXh_Gbar_Naf"))	gbar_Naf_i0 	= aXh_Gbar_Naf
    ifsec "axon_mnode" if(vdef("aXm_Gbar_Naf"))		gbar_Naf_i0 	= aXm_Gbar_Naf
    if( issection("axon_mnode.*") || issection("axon_hill.*" ) ) return

    ifsec "axon_iseg" {
	//if(!ismembrane("Naf_i1")) {
		insert Naf_i1
		uninsert Naf_i0
	//}	
	ifsec "axon_iseg[0]"  if( vdef("aXi0_Gbar_Naf"))		gbar_Naf_i1 	= aXi0_Gbar_Naf
	ifsec "axon_iseg[1]"  if( vdef("aXi1_Gbar_Naf"))		gbar_Naf_i1 	= aXi1_Gbar_Naf
    }
    ifsec "axon_inode" 	      if( vdef("aXr_Gbar_Naf"))			gbar_Naf_i0	=aXr_Gbar_Naf
  }
}


//--------------------------------------------------------------------------------
proc do_KDR(){ local i
  if( vdef( "Gbar_KDR" )){
    if( !ismembrane("KDR_i1") ) insert KDR_i1
    
    ki0_k_ion=140
    ko0_k_ion=2.5
    ki=ki0_k_ion
    ko=ko0_k_ion
    ek=nernst(ki0_k_ion, ko0_k_ion, 1) 

    gbar_KDR_i1 = Gbar_KDR
    if(vdef("Gbar_KDR_dslope") && !issection("axon.*")) 	gbar_KDR_i1 = Gbar_KDR *(1+Gbar_KDR_dslope*ydistP())

    ifsec "soma" 	if(vdef("s0_Gbar_KDR"))			gbar_KDR_i1 	= s0_Gbar_KDR
    ifsec "axon_hill" 	if(vdef("s0_Gbar_KDR"))			gbar_KDR_i1 	= s0_Gbar_KDR

    ifsec "axon_hill" 	if(vdef("aXh_Gbar_KDR"))		gbar_KDR_i1 	= aXh_Gbar_KDR

    ifsec "axon" if( vdef("aX_Gbar_KDR"))			gbar_KDR_i1	= aX_Gbar_KDR
    ifsec "axon_iseg" {	
      if( vdef( "aXi_Gbar_KDR" )) 				gbar_KDR_i1 	= aXi_Gbar_KDR
      ifsec "axon_iseg[0]" 	if( vdef( "aXi0_Gbar_KDR" )) 	gbar_KDR_i1 	= aXi0_Gbar_KDR
      ifsec "axon_iseg[1]" 	if( vdef( "aXi1_Gbar_KDR" )) 	gbar_KDR_i1 	= aXi1_Gbar_KDR
    }
    ifsec "axon_node"       	if( vdef( "aXr_Gbar_KDR" )) 	gbar_KDR_i1 	= aXr_Gbar_KDR
    ifsec "axon_myelin"       	if( vdef( "aXm_Gbar_KDR" )) 	gbar_KDR_i1 	= aXm_Gbar_KDR
  }
}



//--------------------------------------------------------------------------------
proc do_KA(){ local i
  if( vdef( "Gbar_KA" )){
    if( !ismembrane("KA_i1") ) insert KA_i1
    
    ki0_k_ion = 140
    ko0_k_ion = 2.5
    ki=ki0_k_ion
    ko=ko0_k_ion
    ek = nernst(ki0_k_ion, ko0_k_ion, 1)

    gbar_KA_i1 = Gbar_KA
    if(vdef("Gbar_KA_dslope") && !issection("axon.*")) 		gbar_KA_i1 = Gbar_KA *(1+Gbar_KA_dslope*ydistP() )
  
    
    ifsec "axon_hill" 	if(vdef("aXh_Gbar_KA"))			gbar_KA_i1 	= aXh_Gbar_KA
    ifsec "axon_myelin" if(vdef("aXm_Gbar_KA"))			gbar_KA_i1 	= aXm_Gbar_KA
    if( issection("axon_myelin.*") || issection("axon_hill.*" ) ) return

    ifsec "axon" if( vdef("aX_Gbar_KA"))			gbar_KA_i1	= aX_Gbar_KA
    ifsec "axon_iseg" {	
      if( vdef( "aXi_Gbar_KA" )) 				gbar_KA_i1 	= aXi_Gbar_KA
      ifsec "axon_iseg[0]" 	if( vdef( "aXi0_Gbar_KA" )) 	gbar_KA_i1 	= aXi0_Gbar_KA
      ifsec "axon_iseg[1]" 	if( vdef( "aXi1_Gbar_KA" )) 	gbar_KA_i1 	= aXi1_Gbar_KA
    }
    ifsec "axon_inode"       	if( vdef( "aXr_Gbar_KA" )) 	gbar_KA_i1 	= aXr_Gbar_KA
    ifsec "axon_mnode"       	if( vdef( "aXm_Gbar_KA" )) 	gbar_KA_i1 	= aXm_Gbar_KA
  }
}


//--------------------------------------------------------------------------------
proc do_h(){ local i
  if( vdef( "Gbar_h" )){
    if( !ismembrane("h_i0") ) insert h_i0
    eh_i0 = G_eh
    gbar_h_i0 = Gbar_h
    if(vdef("Gbar_h_dslope") && !issection("axon.*")) 	gbar_h_i0 = Gbar_h *(1+Gbar_h_dslope*ydistP() )

    //ifsec "axon_hill" 	if(vdef("aXh_Gbar_h"))			gbar_h_i0 	= aXh_Gbar_h
    //ifsec "axon_myelin" if(vdef("aXm_Gbar_h"))			gbar_h_i0 	= aXm_Gbar_h
    //if( issection("axon_myelin.*") || issection("axon_hill.*" ) ) return

    //ifsec "axon" if( vdef("aX_Gbar_h"))				gbar_h_i0	= aX_Gbar_h
    //ifsec "axon_iseg" {	
    //  if( vdef( "aXi_Gbar_h" )) 				gbar_h_i0 	= aXi_Gbar_h
    //  ifsec "axon_iseg[0]" 	if( vdef( "aXi0_Gbar_h" )) 	gbar_h_i0 	= aXi0_Gbar_h
    //  ifsec "axon_iseg[1]" 	if( vdef( "aXi0_Gbar_h" )) 	gbar_h_i0 	= aXi1_Gbar_h
    //}
    //ifsec "axon_node"       	if( vdef( "aXr_Gbar_h" )) 	gbar_h_i0 	= aXr_Gbar_h
    //ifsec "axon_myelin"       	if( vdef( "aXm_Gbar_h" )) 	gbar_h_i0 	= aXm_Gbar_h
  }
}

//----------------------------------------------------------------------
objref iss
init_first = 1
iss_unstable = 0 	// set 0 to find out; once set avoid running again
proc init() {   local v0, v1 
  if( init_first ){
    init_first = 0
    // calculate G_e_pas_slope to adjust e_pas for each trace's baseline
    //G_e_pas_slope = 0
    //G_e_pas += 1
    mulfit_cell_init()
    iss.init_steady_state	// init_steady_state()
    if( check_iss_unstable()) return
    v1 = v
    //G_e_pas -= 1
    mulfit_cell_init()
    iss.init_steady_state	// init_steady_state()
    if( check_iss_unstable()) return
    v0 = v
    //G_e_pas_slope = 1/(v1-v0)
    //printf( "init: G_e_pas_slope %g\n", G_e_pas_slope )
    
  }
  mulfit_cell_init()
  init_last_call()	// hook to insert changes just before run() call
  iss.init_steady_state() // init_steady_state()
  if( check_iss_unstable()) return
}

// Hook to insert changes just before run() call (can be redefined later)
proc init_last_call(){
}

//----------------------------------------------------------------------
func check_iss_unstable(){
  if( iss.dV > iss_unstable_th ){
    iss_unstable = 1
    printf( ">>>init: UNSTABLE Steady State iss.dV=%g iss_unstable_th=%g; setting tstop=20<<<\n", \
    iss.dV, iss_unstable_th )
    tstop = 20
    return 1
  }
  return 0
}

//----------------------------------------------------------------------
objref stim
proc do_cell(){
  
  forall delete_section()
  chdir("/home/ximi/Projects/ParSims")
  load_file( 1, $s1 )	// load cell
  if( numarg()>1 ) load_file( 1, $s2 )	// load axon
  soma {
    stim	= new IClamp(0.5)
  }
  // chdir("/Volumes/d1/Users/ximing/Projects/ParSims/pDE")
}

//================================================================================
// pDE interface related code

begintemplate pDE_fit_case
  strdef id, Mtemplate, Mfunc, scaleF, hoc_var, hoc_before, hoc_after, tgt_file, tgt_before, tgt_after
  public id, Mtemplate, Mfunc, scaleF, hoc_var, hoc_before, hoc_after, tgt_file, tgt_before, tgt_after
  public scaleF, tgt_bldiff
  proc init(){
    id		= $s1
    Mtemplate 	= $s2
    Mfunc	= $s3
    scaleF	= $s4
    hoc_var	= $s5
    hoc_before	= $s6
    hoc_after	= $s7
    tgt_file	= $s8
    tgt_before  = $s9
    tgt_after  	= $s10
    
    tgt_bldiff	= 0	// baseline differential from avg of tgt set
  }
endtemplate pDE_fit_case

proc dfc_do_cmd(){ localobj so, sf
  sf = new StringFunctions()
  so = new str_obj()
  sprint( so.s1, "%s;", $s1 )
  while( strcmp( so.s1, "")){
    sf.head( so.s1, ";", so.s2  )
    if( strcmp( so.s2, "" )) {
      if( dfc_idebug ) printf( "\ndfc_do_cmd: %s\n", so.s2 )
      if( numarg() == 1 ) execute( so.s2 )
      if( numarg() == 2 ) execute( so.s2, $o2 )
      if( numarg() == 3 ) $o3.append( new str_obj( so.s2 ))
    }
    sf.tail( so.s1, ";", so.s1  )
  }
}

//----------------------------------------------------------------------------------------------------
objref pDE_fc_list
objref dfc_tgt, dfc_tgtL
{ blmin=1 blMax=19 } // baseline limits (ms)

func dfc_load_dfc_tgt(){ local i localobj fc_i, sf, str, pDE_fc_i
  pDE_fc_i=$o1
  sf=new StringFunctions() str=new str_obj()
  dfc_tgt = new eTrace()
  dfc_tgt.idebug = dfc_idebug
  dfc_do_cmd( pDE_fc_i.tgt_before )
  if( sf.head( pDE_fc_i.tgt_file, ".txt$", str.s1 ) >= 0 ) dfc_tgt.load_file_home( pDE_fc_i.tgt_file )
  if( sf.head( pDE_fc_i.tgt_file, ".htf$", str.s1 ) >= 0 ) dfc_tgt.load_htf_1p0c( pDE_fc_i.tgt_file, "HOME" )
  dfc_do_cmd( pDE_fc_i.tgt_after )
  return dfc_tgt.vec_v.mean( round(blmin/dfc_tgt.dt_sample), round(blMax/dfc_tgt.dt_sample)) // return mean from blmin to blMax
}

func round(){ return int( 0.5 + $1 ) }

proc dfc_load_traces(){ local i, j, tmp, bl_avg, bl_i localobj pDE_fc_i, blV
  dfc_tgtL = new List()
  blV = new Vector()
  bl_avg = 0
  for i=0, pDE_fc_list.count-1 { 
    bl_i = dfc_load_dfc_tgt( pDE_fc_list.o(i) )
    dfc_tgtL.append( dfc_tgt )
    blV.append( bl_i )
    bl_avg += (bl_i - bl_avg)/(i+1)			// clever way to compute running avg
  }
  printf( "dfc_load_traces: found bl_avg %g.\n", bl_avg )
  if( vdef( "BL_avg" )) {
    printf( "dfc_load_traces: Using preset BL_avg %g\n", BL_avg )
    bl_avg = BL_avg          // Use BL_avg if defined in pDE script
  }
  for i=0, pDE_fc_list.count-1 {
    pDE_fc_list.o(i).tgt_bldiff = bl_avg - blV.x[i]
    printf( "dfc_load_traces i %d bli %g bl_avg %g tgt_bldiff %g\n", i, blV.x[i], bl_avg, pDE_fc_list.o(i).tgt_bldiff )
  }
}

//----------------------------------------------------------------------------------------------------
strdef cell_file_name, axon_file_name	// so they can be defined in pDE VERBATIM
proc pDE_init_cell(){
  // Not needed here. Out so that dfc_run_agai works  pDE_asg()	// so that do_cell can use name_declared() calls
  //  do_cell( "n420t-pc2-L10000-ignoreD-newsoma.hoc", "naceaxon-m-0-long.hoc" )
  //  do_cell( "n420t-pc2-L10000-ignoreD-newsoma.hoc", "Meeks-axon-0.hoc" )
  //  do_cell( "n420t-pc2-L10000-ignoreD-newsoma.hoc", "ca1b-rot-axon-750-aE-v2.hoc" )
  //  do_cell( "n420t-pc2-L10000-ignoreD-newsoma.hoc", "my-ca1-isegs-myelin.hoc" )
  //  do_cell( "n420t-pc2-L10000-DL.hoc", "my-ca1-isegs-myelin.hoc" ) 
  if( strcmp(cell_file_name,"")==0 ) cell_file_name = "n420t-pc2-L10000-ignoreD-newsoma.hoc"
  //if( strcmp(axon_file_name,"")==0 ) axon_file_name = "my-ca1-isegs-myelin.hoc"
  do_cell( cell_file_name) 
  if( vdef( "soma_diam_f")) forsec "soma" { diam *= soma_diam_f printf( "soma diam %s %g\n", secname(), diam ) }
  
  { cvode.active(1) cvode.atol(1.e-10) }

  iss = new initss( cvode, -80 )		// iss_v_init = -80
  iss.idebug = 0.5
  iss_unstable_th = 0.1
  iss_unstable_penalty = 1e20

  execute( "access soma" )			// avoid sintax error if soma is not created at compile time
}

//----------------------------------------------------------------------------------------------------
obfunc set_sim_stim(){ local i localobj eT, sT
  { eT = $o1 sT=$o2 }
  { eT.stim_amp=sT.amp eT.stim_del=sT.del eT.stim_dur=sT.dur }
  return eT
}

//----------------------------------------------------------------------------------------------------
objref dfc_i, dfc_tgt_i, dfc_sim, dfc_sim_rec, dfc_simL, dfc_eD
objref dfc_recL, dfc_simL_i, dfc_sim_recL

dfc_first = 1
func pDE_do_fit_case(){ local i, icase, irec localobj str, sL
  icase = $1
  if( dfc_first ) {
    dfc_first = 0
    dfc_simL = new List()
    pDE_asg()                   // so that init_cell and load_traces can use vdef() calls
    dfc_load_traces()
    pDE_init_cell()
  }
  dfc_i = pDE_fc_list.o( icase )
  dfc_tgt_i = dfc_tgtL.o( icase )
  
  str = new str_obj() 
  execute( str.sPrint( "dfc_eD = new %s()", dfc_i.Mtemplate ).s1 )
  dfc_eD.idebug = dfc_idebug
  tstop = dfc_tgt_i.vec_t.x[ dfc_tgt_i.vec_t.size-1 ] + dfc_tgt_i.dt_sample 
  
  dfc_recL = new List()
  sL = str.split( dfc_i.hoc_var, ";" )	// split to get list of recording section locations
  for i=0, sL.count-1 execute( str.sPrint( "%s dfc_recL.append( new SectionRef())", sL.o(i).s1 ).s1 )

  dfc_do_cmd( dfc_i.hoc_before )	// hoc_before here; so stim parms can be set in hoc_before code

  dfc_sim_recL = new List()
  for irec=0, dfc_recL.count-1 {
    dfc_sim_recL.append( new eTrace() )
    set_sim_stim( dfc_sim_recL.o(irec), stim )    
    //    dfc_sim_recL.o(irec).stim_amp = stim.amp
    //    dfc_sim_recL.o(irec).stim_dur = stim.dur
    //    dfc_sim_recL.o(irec).stim_del = stim.del
    dfc_sim_recL.o(irec).idebug = dfc_idebug
    dfc_sim_recL.o(irec).dt_sample = -1		// -1 => non-uniform for cvode
    dfc_sim_recL.o(irec).name = sL.o(irec).s1	// place recording section in name
    dfc_recL.o(irec).sec cvode.record( &v(0.5), dfc_sim_recL.o(irec).vec_v, dfc_sim_recL.o(irec).vec_t )
  }
  access dfc_recL.o(0).sec

  if( ! iss_unstable ){		// run only if previous case was stable (ie not unstable); see init()
    printf( "\n\t" )
    system( "date" )
    printf( "case %s\n", dfc_i.id )
    tgt_bldiff = dfc_i.tgt_bldiff
    pDE_asg()
    run() 
    dfc_simL_i = new List()
    for irec=0, dfc_recL.count-1 dfc_simL_i.append( dfc_sim_recL.o(irec).copy() )
    dfc_simL.append( dfc_simL_i )
  }  
  if( iss_unstable ){
    dfc_err = iss.dV / iss_unstable_th * iss_unstable_penalty
  }else{
    dfc_do_cmd( dfc_i.hoc_after )	// hoc_after
    dfc_err = 0 
    //    dfc_err = dfc_eD.listM( dfc_i.Mfunc, dfc_sim, dfc_tgtLi ) 
    dfc_eD.ilog = 1
    printf( "id %s ", dfc_i.id )
    //    sprint( str.s1, "dfc_err = dfc_eD.%s( dfc_sim, dfc_tgt_i )", dfc_i.Mfunc )
    //    sprint( str.s1, "dfc_err = dfc_eD.%s( dfc_simL_i.o(0), dfc_tgt_i )", dfc_i.Mfunc )
    //    execute( str.s1 )
    execute( str.sPrint( "dfc_err=%s", dfc_i.Mfunc).s1 )
  }
  execute( str.sPrint( "dfc_scaleF = %s", dfc_i.scaleF ).s1 )
  printf( " dfc_scaleF %g pDE_do_fit_case %g\n", dfc_scaleF, dfc_err*dfc_scaleF )

  return dfc_err * dfc_scaleF
}

//----------------------------------------------------------------------------------------------------
begintemplate recSpec
  objref sr, eT
  strdef name
  public name, sr, vr, eT, dist, tzc
  proc init(){
    sr = new SectionRef()
    name = secname()
    vr = $1
    dist = distance( vr )
    eT = new eTrace()
  }
  public set_eT
  obfunc set_eT(){
    eT = $o1.copy()
    eT.resample_dt(0.01)
    eT.vec_dv.deriv( eT.vec_v, eT.dt_sample, 2 )
    eT.vec_ddv = new Vector()
    eT.vec_ddv.deriv( eT.vec_dv, eT.dt_sample, 2 )
    tzc = eT.vec_t.x( eT.vec_v.indwhere(">=",0) )
    return eT
  }
  public sort_dist
  obfunc sort_dist(){ local i localobj iO, iOs, rL, rLs
    rL = $o1
    iO = new Vector()
    for i=0, rL.count-1 iO.append( rL.o(i).dist )
    iOs = iO.sortindex()
    rLs = new List()
    for i=0, rL.count-1 rLs.append( rL.o(iOs.x[i]) )
    return rLs
  }
endtemplate recSpec

//----------------------------------------------------------------------------------------------------
// Run again case icase and return eTrace results
obfunc dfc_run_againL(){ local i, icase localobj eT, eT1, dfc_i, dfc_tgt_i, rL, eTL
  icase = $1
  dfc_i = pDE_fc_list.o( icase )
  dfc_tgt_i = dfc_tgtL.o( icase )
  pDE_init_cell()
  dfc_do_cmd( dfc_i.hoc_before )
  tstop = dfc_tgt_i.vec_t.x[ dfc_tgt_i.vec_t.size-1 ] + dfc_tgt_i.dt_sample 
  tgt_bldiff = dfc_i.tgt_bldiff
  
  rL = new List()
  access   soma 
  distance()
  rL.append( new recSpec( x ))
  forsec "axon" for (x) if(x>0&&x<1) rL.append( new recSpec( x ))
  eTL = new List()
  for i=0, rL.count-1 {
    eTL.append( new eTrace() )
    set_sim_stim( eTL.o(i), stim )    
    rL.o(i).sr.sec cvode.record( &v( rL.o(i).vr ), eTL.o(i).vec_v, eTL.o(i).vec_t )
  }
  run()
  for i=0, rL.count-1 rL.o(i).set_eT( eTL.o(i) )
  return rL
}

// Return (and plot if pG present) rL for each parm value variation runs vp+ivp*k1 to vp+ivp*k2 in ivp steps
// ( icase, "var", vp, ivp, k1, k2 [, pG [,opt]] )
obfunc dfc_var_runsL(){ local i, imin, tmin, icase, vp, ivp, nv, k, k1, k2, opt localobj eT, eT1, eTL, str, pG, rL, rLL
  icase = $1
  str = new str_obj( $s2 )
  { vp=$3 ivp=$4 k1=$5 k2=$6 }
  rLL = new List()
  for k=k1, k2 {
    nv = vp + ivp * k
    sprint( str.s2, "%s=%g", str.s1, nv )
    execute( str.s2 )
    rL = dfc_run_againL(icase) 
    rL.o(0).eT.name = str.s2
    rLL.append( rL )
  }
  if( numarg()>6 ){ 
    eT = plot_rLL_dt( rLL )
    $o7 = eT.plotG
    { eT.plotG.view(0,0,10,10, 100+20+300*1.8, 100, 300*2.5, 200*3 ) eT.plotG.exec_menu( "View = plot" ) }
    { opt = 101 if( numarg()>8 ) opt = $9 }
    pG = new Graph(0)
    for k=0, rLL.count-1 pG = rLL.o(k).o(0).eT.iso_spike(dfc_seg_look_options(),1,-0.5,0).plot_ddv( pG, opt, k+1 )
    { pG.view(0,0,10,10, 100, 100, 300*1.8, 200*3 ) pG.exec_menu( "View = plot" ) }
    $o8 = pG
  }
  return rLL
}

obfunc plot_rLL_dt(){ local k, i, imin, tmin localobj eT, eT1, rLL, rL
  rLL = $o1
  eT = new eTrace()
  eT.plotG = new Graph(0)
  for k=0, rLL.count-1 {
    rL = rLL.o(k)
    tmin = 1e70
    for i=0, rL.count-1 {
      eT.plotG.mark( rL.o(i).dist, rL.o(i).tzc, "s", 5, axon_color( rL.o(i).name), 1 )
      if( rL.o(i).tzc<tmin ){ imin=i tmin=rL.o(i).tzc }
    }
    for i=0, rL.count-1 if( rL.o(i).tzc==tmin ) eT.plotG.mark( rL.o(i).dist, rL.o(i).tzc, "S", 6, axon_color( rL.o(i).name), 1 )
    
    // if(k==0){ eT.plotG=new Graph() eT.plotG.align( 1, 1 ) eT.plotG.label( 1-1/22, 1-1/22 ) }
    eT1 = rL_td_eT( rL )
    sprint( eT1.name, "%s t=%4.2f vel=%4.2f", rL.o(0).eT.name, tmin, axon_speed(rL) )
    eT.addplot_c( eT1, k%7+1 )
  }
  return eT
}

obfunc run_plot_all_axon_ddv(){ local i, icase, tspk, tL, tR localobj pG, rL, sf, eT
  icase = $1
  tL=-0.5 if( numarg()>1 )tL=$2
  tR=0    if( numarg()>2 )tR=$3
  sf = new StringFunctions()
  rL = dfc_run_againL( icase ) // rL.o(0) is soma
  pG = new Graph()
  rL.o(0).eT.copy().iso_spike(dfc_seg_look_options(),1,-0.5,0, &tspk )
  printf( "tspk %g\n", tspk )
  for i=0, rL.count-1 {
    if( sf.substr(rL.o(i).name, "node")>=0 || sf.substr(rL.o(i).name, "myelin")>=0 ) continue
    pG.color( axon_color(rL.o(i).name ))
    eT = rL.o(i).eT.copy().cut_at2( tspk+tR, tspk+tL )
    eT.vec_t.add( tL )
    // pG = rL.o(i).eT.copy().cut_at2(tspk+0.1,tspk-0.5).plot_ddv( pG, 001, axon_color(rL.o(i).name) )
    eT.vec_ddv.line( pG , eT.vec_t )
  }
  pG.exec_menu( "View = plot" )
  return pG
}

// calculate speed between nodes with min and max tzc
func axon_speed(){ local i, im, iM, vel localobj rL, sf
  rL = $o1
  sf = new StringFunctions()
  im=iM=-1
  for i=0, rL.count-1 if( sf.substr( rL.o(i).name, "node")>=0 ){
    if( im<0 ) im=iM=i // set to first "node" match
    if( rL.o(i).tzc < rL.o(im).tzc ) im=i
    if( rL.o(i).tzc > rL.o(iM).tzc ) iM=i
  }
  vel = ( rL.o(iM).dist - rL.o(im).dist ) / ( rL.o(iM).tzc - rL.o(im).tzc ) * 1e-3 // um/ms * 1e-3 = m/s 
  printf( "axon_speed: i,tzc min %g %g Max %g %g vel %g\n", im, rL.o(im).tzc, iM, rL.o(iM).tzc, vel )
  return vel
}

func axon_color(){ local i, col localobj str, sf
  str = new str_obj( $s1 )
  sf = new StringFunctions()
  col = 1
  if( sf.head( str.s1, "hill", str.s2 )> 0 ) col = 2
  if( sf.head( str.s1, "iseg", str.s2 )> 0 ) col = 3
  if( sf.head( str.s1, "prox", str.s2 )> 0 ) col = 4
  if( sf.head( str.s1, "myelin", str.s2 )> 0 ) col = 5
  if( sf.head( str.s1, "node", str.s2 )> 0 ) col = 6
  return col
}

//----------------------------------------------------------------------------------------------------
// Run again case icase and return eTrace results
obfunc dfc_run_again(){ local icase localobj eT, eT1, dfc_i, dfc_tgt_i
  icase = $1
  dfc_i = pDE_fc_list.o( icase )
  dfc_tgt_i = dfc_tgtL.o( icase )
  pDE_init_cell()
  dfc_do_cmd( dfc_i.hoc_before )
  tstop = dfc_tgt_i.vec_t.x[ dfc_tgt_i.vec_t.size-1 ] + dfc_tgt_i.dt_sample 
  tgt_bldiff = dfc_i.tgt_bldiff

  eT = new eTrace()
  set_sim_stim( eT, stim )    
  soma cvode.record( &v(0.5), eT.vec_v, eT.vec_t )
  run()
  eT1 = eT.copy()
  eT1.resample_dt(0.01)
  eT1.vec_dv.deriv( eT1.vec_v, eT1.dt_sample, 2 )
  eT1.vec_ddv = new Vector()
  eT1.vec_ddv.deriv( eT1.vec_dv, eT1.dt_sample, 2 )
  return eT1
}

//----------------------------------------------------------------------------------------------------
// Return (and plot if pG present) list of parm value variation runs vp+ivp*k1 to vp+ivp*k2 in ivp steps
obfunc dfc_var_runs(){ local icase, vp, ivp, nv, k, k1, k2, opt localobj eT, eTL, str, pG
  icase = $1
  str = new str_obj( $s2 )
  { vp=$3 ivp=$4 k1=$5 k2=$6 }
  eTL = new List()
  for k=k1, k2 {
    nv = vp + ivp * k
    sprint( str.s2, "%s = %g", str.s1, nv )
    execute( str.s2 )
    eT = dfc_run_again(icase) 
    eT.name = str.s2
    eTL.append( eT )
  }
  if( numarg()>6 ){
    { opt = 101 if( numarg()>7 ) opt = $8 }
    for k=0, eTL.count-1 pG=(eTL.o(k).iso_spike(dfc_seg_look_options(),1,1).plot_ddv( pG, opt, k+1 ))
    // Note parens. below does not work
    //for k=0, eTL.count-1 pG=eT.plot_ddv( pG, eTL.o(k).iso_spike(dfc_eD_options(),1,1), opt, k+1 )
    $o7 = pG
  }
  return eTL
}

//----------------------------------------------------------------------------------------------------
proc dfc_plot_1(){ local i, n 
  $o1.plot_color = $3
  $o1.plot_brush = $4
  $o1.addplot( $o2 ) 
}

proc dfc_plot_place(){ local n
  n = $2
  $o1.plotG.unmap()
  $o1.plotG.view(0,0,10,10, (n%5)*(300+20), 100+int(n/5)*(200+65), 300, 200 )
  $o1.recenter()
}

func is_obj_name(){ local i localobj sf, str
  str = new str_obj($s2)  sf = new StringFunctions()
  sprint( str.s2, "%s", $o1 )
  if( sf.tail( str.s2, str.s1, str.s3 ) == sf.len(str.s1) ) return 1
  return 0
}

objref igL
strdef pDE_log_name
obfunc plot_gen(){
  igL = new pDE_log()
  igL.read_n_plot( pDE_log_name, pDE_gen_N )
  return igL
}

objref pG_axon, pG_sec
obfunc plot_axon(){ local i, in localobj str
  pG_axon = new Graph()
  pG_sec = new List()
  str = new str_obj()
  pG_sec.append( new str_obj( "axon_hill" ))
  in = 19
  if( vdef( "aX_iseg_n" )) in = aX_iseg_n
  for i=0,in-1 pG_sec.append( str.copy().sPrint( "axon_iseg[%d]", i ) )
  pG_sec.append( new str_obj( "axon_prox" ))
  if( aX_node_n > 0 ){
    pG_sec.append( new str_obj( "axon_node[0]" ))
    pG_sec.append( new str_obj( "axon_myelin[0]" ))
  }
  pG_sec.append( new str_obj( "soma" ))		// put last so that soma is accessed at the end below
  for i=0, pG_sec.count-1 {
    execute( pG_sec.o(0).sPrint( "access %s", pG_sec.o(i).s1 ).s1 )
    pG_axon.mark( distance(0.5), gbar_Naf_i1, "+", 12, 2, 1 )    
    pG_axon.mark( distance(0.5), gbar_KDR_i1, "o", 12, 3, 1 )    
  }
  pG_axon.exec_menu( "View = plot" )
  return pG_axon
}

objref dfc_ddVpG
obfunc dfc_pG_ddV(){ local i, iopt localobj pG
  pG = $o1
  iopt = $2
  if( iopt==0 ) for i=0,dfc_tgtL.count-1 { dfc_pG_one_ddV(pG,i,001,0,1)   dfc_pG_one_ddV(pG,i,001,1,2) }
  if( iopt==1 ) for i=0,dfc_tgtL.count-1 { dfc_pG_one_ddV(pG,i,001,0,i+1,1) dfc_pG_one_ddV(pG,i,001,1,i+1,2) }
  if( iopt==2 ) for i=0,dfc_tgtL.count-1 { dfc_pG_one_ddV(pG,i,010,0,1)   dfc_pG_one_ddV(pG,i,010,1,2) }
  if( iopt==3 ) for i=0,dfc_tgtL.count-1 { dfc_pG_one_ddV(pG,i,010,0,i+1,1) dfc_pG_one_ddV(pG,i,010,1,i+1,2) }
  return pG
}

obfunc dfc_pG_one_ddV(){ local icase, iopt, isel, icol, ibrush localobj eT, pG, eTc
  if(numarg()>0 ) pG=$o1 
  if( object_id( pG )==0 ) { pG = new Graph() }
  icase=$2 iopt=$3 isel=$4 icol=$5 
  dfc_i = pDE_fc_list.o( icase )
  ibrush=1 if( numarg()>5 ) ibrush=$6
  pG.brush( ibrush )
  if( isel==0 ) eTc = dfc_tgtL.o(icase)
  if( isel==1 ) eTc = dfc_simL.o(icase).o(0)
  if( eTc.stim_amp<0.2 || eTc.stim_amp==0.75 ) return pG
  eT = eTc.iso_spike( dfc_seg_look_options(), 1, -0.65, 0.45 )
  if( object_id(eT)>0) eT.plot_ddv( pG, iopt, icol )
  return pG
}

// per fit-case: dfc_simL has one list entry (with eTraces); dfc_tgtL has one eTrace 
proc dfc_plot_all(){ local i, j localobj eTi
  for i=0, dfc_simL.count-1 {
    eTi = dfc_tgtL.o(i)
    for j=0, dfc_simL.o(i).count-1 dfc_plot_1( eTi, dfc_simL.o(i).o(j), 2+j, 1 )
    dfc_plot_1( eTi, eTi, 1, 1 )
    //    for j=0, dfc_tgtL.o(i).count-1 dfc_plot_1( eTi, dfc_tgtL.o(i).o(j), 1, 1 )
    dfc_plot_place( eTi, i )
    eTi.plotG.menu_action("plot_gen","plot_gen()" )
    eTi.plotG.menu_action("plot_axon","plot_axon()" )
    eTi.plotG.menu_action("plot_ddVs_all","dfc_ddVpG=new Graph() dfc_pG_ddV(dfc_ddVpG,0)" )
    eTi.plotG.menu_action("plot_ddVs_color","dfc_ddVpG=new Graph() dfc_pG_ddV(dfc_ddVpG,1)" )
    eTi.plotG.menu_action("plot_dVs","dfc_ddVpG=new Graph() dfc_pG_ddV(dfc_ddVpG,2)" )
    eTi.plotG.menu_action("plot_dVs_color","dfc_ddVpG=new Graph() dfc_pG_ddV(dfc_ddVpG,3)" )
  }
}

proc dfc_plot_all_old(){ local i 
  for i=0, dfc_simL.count-1 dfc_plot_one( dfc_simL.o(i), dfc_tgtL.o(i), i )
}

//================================================================================
obfunc rL_td_eT(){ local i localobj rL, eT, sIc, sI
  rL = $o1
  eT = new eTrace()
  sIc = new Vector()
  for i=0, rL.count-1 sIc.append( rL.o(i).dist )
  sI = sIc.sortindex()
  for i=0, rL.count-1 {
    eT.vec_t.append( rL.o(sI.x[i]).dist)
    eT.vec_v.append( rL.o(sI.x[i]).tzc )
  }
  return eT
}

//--------------------------------------------------------------------------------
// Usage above
// objref rLL, pGd, pG

// { pDE_asg() rLL = dfc_var_runsL( 0, "aXh_Gbar_Naf", aXh_Gbar_Naf, aXh_Gbar_Naf*0.1, -2, 2, pGd, pG ) }
// abort()


// end of pDE interface related code
//================================================================================

------end_hoc_main--------------------------------------------------------------------

------pDE_spec--->>/home/ximi/Projects/ParSims/reduced-passive.pDE<<---------------
# 06Apr10
#  Copied from 1spk-th-072006b-n420-Passive-v7c.pDE
#  Modified to have what 1spk-th-10606b-n420+Fix-h+Naf+KDR-3iALpaper-v7.pDE ha
#
#================================================================================
# No sensitivity analysis
Fit-SA 0 0
Tmp-dir MyTemp


#Fit  072006b   311   200     10     3    0.85  1.0 randE Projects/ParSims/Runs_pDE/thin-1stspike/main-n400-Vbtim-simL-v8d-reduced.hoc
#Fit  072006b   199   110     25     3    0.7  1.0 randE Projects/ParSims/Runs_pDE/thin-1stspike/main-n400-Vbtim-simL-v8d-reduced.hoc
#Fit  072006b   713   120     50     3    0.85  1.0 randE Projects/ParSims/Runs_pDE/thin-1stspike/main-n400-Vbtim-simL-v8d-reduced.hoc
Fit  072006b    191   200      10     3    0.85  1.0 randE /home/ximi/Projects/ParSims/reduced-passive.hoc
#================================================================================
# 10oct08 4:40pm
# Set up traces for 072006b

# 10oct08 4pm
# Stage 0; select traces; time v=0 post spike for +1500 800 400 200
# Stich 800 with 3 4 5 spikes; select v of end trace, stitch at same volt after spike
# Determine bl_avg with 13 traces; BL_avg=-74.3052
# Determine BBF; need closer fit first.

# Run Passive fit with 9 traces
# Use lambda_f_d=0.1

Pop-init uniform noset

# Determined BBF=1.6 from run so far. Resume above

#================================================================================
VERBATIM
cell_file_name="n400td-pc2-sp-axn.hoc"

obfunc dfc_set_stims_etc(){
  print "check pDE dfc_set_stims++++++++++++++++++++"
 /*
  if(vdef("aX_hill_nseg"))\
    execute( "if(axon_hill.nseg<aX_hill_nseg) axon_hill.nseg=aX_hill_nseg" )
  if(vdef("aX_iseg_nseg")) \
    execute( "for i=0,aX_iseg_n-1 {if(axon_iseg[i].nseg<aX_iseg_nseg) axon_iseg[i].nseg= aX_iseg_nseg }" )
  if(vdef("aX_prox_nseg")) \
    execute( "for i=0,aX_prox_n-1 {if(axon_prox[i].nseg<aX_prox_nseg) axon_prox[i].nseg= aX_prox_nseg }" )
  if( vdef("aX_mnode_nseg" )) \
    execute( "forsec \"mnode\" if(nseg<aX_mnode_nseg) nseg= aX_mnode_nseg" )
  */
//  execute( "axon_prox.nseg = aX_prox_nseg" )
//  execute( "for i=0,aX_iseg_n-1 {axon_iseg[i].nseg= aX_iseg_nseg }" )
  stim.amp=$1
  stim.dur=$2
  stim.del=$3
  print "check stim.del +++++++++++++++++++++++++++"
  dfc_options_all( dfc_eD )
  return stim
}

obfunc dfc_set_tgt(){
  print "dfc_set_tgt()+++++++++++++++++++++++++++"
  dfc_tgt.stim_amp=$1
  dfc_tgt.stim_dur=$2
  dfc_tgt.stim_del=$3
  if( numarg()>3 ) dfc_tgt.cut_at2($4,$5)
  return dfc_tgt
}

proc dfc_sim_BBF(){
  dfc_simL_i.o(0).dc_shift(stim.del+BBFdelay,stim.del+stim.dur+BBFdelay,-BBF*stim.amp)
}

//================================================================================
// New stuff for pkbeg posfix

obfunc dfc_seg_look_options(){ local i localobj dI
  dI = new eMatch() if( numarg()>0)dI =$o1
  dI.seg_option	= 1101
  dI.seg_dt	= 0.09
  dI.seg_slp_dt	= 0.09
  dI.seg_slp_th	= 10
  dI.seg_v_th	= 0
  dI.seg_tiny_last	= 0
  if( strcmp(dfc_i.id,"072006b-2ms+1500pA-pkbeg") == 0 ){ dI.seg_dt=dI.seg_slp_dt= 0.02 }
  return dI
}

obfunc dfc_options_all(){ local i localobj eD
  if( numarg()==0 ) eD = dfc_seg_look_options()
  if( numarg()> 0 ) eD = dfc_seg_look_options($o1)

  eD.match_option	= 5.2
  eD.alpha = eD.beta = eD.gamma = eD.delta = eD.eta = eD.mF1 = eD.mF2 = eD.pkP = eD.pkPs = 0

  eD.ilog = 1
  return eD
}

// rough match to train; 
// necessary to avoid traces that don't return to baseline
// also check spikes also appear in axon
func dfc_trim(){ local i, t0_tail, f1, f2, r1, r2, res localobj eD
  f1=$1   f2=$2

  eD = dfc_options_all(dfc_eD)
  eD.eta 		= 1
  eD.mF2		= 200
  eD.pkP		= 1500*5
  eD.pkPs		= 1
  eD.pkPsA		= 1
  
  t0_tail = stim.del + stim.dur		// end of stimulus

  eD.tmin = t0_tail			// compare tails after end stimulus: axon vs tgt
  r2 = eD.m0( dfc_simL_i.o(1), dfc_tgt_i ) 

  eD.tmin = 0
  printf( "\n\t >>dfc_trim: DfpwPkdVa_aXe: " )
  r1 = eD.DfpwPkdVa_aXe(dfc_simL_i,dfc_tgt_i,-1,-1)	// 800=8.90, 400=15.2, 200=30.82, 1500=6.7  
  
  res = r1*f1 + r2*f2
  printf( "\n\t dfc_trim t0_tail %g r1,2 %g %g f1,f2 %g %g ri*fi %g %g\n\t res %g<<\n",\
  t0_tail, r1,r2, f1,f2, r1*f1, r2*f2, res )
  return res
}

//================================================================================
// match first spike (up to tmax)
// gamma and delta to match dV and ddV; largely independent of trace length/stim.amp
// eta scaled by trace length
//================================================================================
func dfc_pkbeg(){ local i, tmax, dV_f, eta_f, r1 localobj eD
  tmax = $1
  
  dV_f = 45*2
  eta_f = 300 + 100/(tmax-stim.del-1.1)	//  A + B/(time from stim.del to base of spike) A=for spike; B for before spike

  eD = dfc_eD //  eD = dfc_options_all(dfc_eD)
  // eD.mF2	= 200*10
  eD.mF2        = 6000 * stim.amp       // peak time error proportional to stimulation amplitude  
  eD.pkP        = 1500*5
  eD.pkPs	= 1
  eD.phi	= 600/116/10 	// range_dV/range_V	old=0.4 * 10
  eD.phi_1 	= 0.5+0.15
  eD.phi_2 	= 0.45-0.02
  eD.chi	= 1000/116/100	// range_ddV/range_V 	old=0.02 * 8
  eD.chi_1  	= 0.5+0.15	
  eD.chi_2 	= 0.15	
  if( numarg()>1) eD.chi_2=$2   // adhoc inserted to override
  eD.phi*=dV_f eD.chi*=dV_f

  eD.eta	= eta_f	
  // eD.mF2=0   eD.pkP=1000*eta_f	// for initial pop for Naf & KDR parms

  eD.tmax	= tmax
  printf( "\n\t >>dfc_pkbeg: DfpwPkdVa: " )
  r1 = eD.DfpwPkdVa(dfc_simL_i.o(0),dfc_tgt_i)	// 800=8.90, 400=15.2, 200=30.82, 1500=6.7  
  printf( "\n\t dfc_pkbeg: r1 %g \n\t<<\n", r1 )
  return r1
}


ENDVERBATIM

#================================================================================
# Fit-case name template func scale hoc_var hoc_before hoc_after tgt_files tgt_before tgt_after
# Active traces 20kHz

# For Naf & KDR initial parm search
#Fit-case 072006b-2ms+1500pA eMatch dfc_eD.DfpwPkdVa(dfc_simL_i.o(0),dfc_tgt_i) 5 soma dfc_set_stims_etc(1500/1000,2,5);dfc_eD.eta=1;dfc_eD.pkP=1500*5;dfc_eD.pkPs=1 dfc_sim_BBF() 2:/Volumes/d1/Users/ximing/cNeuro/Data/Grover-2006/072006b/ACSF/2ms+1500pA.htf blMax=4 dfc_set_tgt(1500/1000,2,21,136,16)

#Fit-case 072006b-100ms+800pA eMatch dfc_eD.DfpwPkdVa(dfc_simL_i.o(0),dfc_tgt_i) 5  soma dfc_set_stims_etc(800/1000,100,5);dfc_eD.eta=1;dfc_eD.pkP=1500*5;dfc_eD.pkPs=1 dfc_sim_BBF() 2:/Volumes/d1/Users/ximing/cNeuro/Data/Grover-2006/072006b/ACSF/100ms+800pA.htf blMax=4 dfc_set_tgt(800/1000,100,21,200,16)

# End for Naf & KDR initial parm search


# Note dfc_eD.seg_dt=dfc_eD.seg_slp_dt=0.02 cause end_stim almost on peak
# 2:active set ================================================================================
#Fit-case 072006b-2ms+1500pA-pkbeg eMatch dfc_pkbeg(7.36) 1 soma dfc_set_stims_etc(1500/1000,2,5);dfc_eD.seg_dt=dfc_eD.seg_slp_dt=0.02;dfc_eD.pkPs=3 dfc_sim_BBF() 2:/Volumes/d1/Users/ximing/cNeuro/Data/Grover-2006/072006b/ACSF_20kHz/2ms+1500pA.htf blMax=4 dfc_set_tgt(1500/1000,2,21,7.36+1+16,16)

# later runs use the following instead

#modified
#Fit-case 2ms+1500pA_chopped.dat eMatch dfc_pkbeg(7.36,0.05) 1 soma dfc_set_stims_etc(1500/1000,2,5);dfc_eD.pkPs=3; dfc_sim_BBF() 2:/Volumes/d1/Users/ximing/cNeuro/Data/Grover-2006/072006b/ACSF_20kHz/2ms+1500pA.htf blMax=4 dfc_set_tgt(1500/1000,2,21,7.36+1+16,16)

#Fit-case 072006b-2ms+1500pA-pkbeg eMatch dfc_pkbeg(7.36,0.05) 1 soma dfc_set_stims_etc(1500/1000,2,5);dfc_eD.pkPs=3; dfc_sim_BBF() 2:/Volumes/d1/Users/ximing/cNeuro/Data/Grover-2006/072006b/ACSF_20kHz/2ms+1500pA.htf blMax=4 dfc_set_tgt(1500/1000,2,21,7.36+1+16,16)

# Note about TRIMMED file. Each trace was cut at a diffent time from same trace 2 of 072006b-100ms+800pA
# So, all trimmed traces should be compared to trace 2:072006b-100ms+800pA
# Trimmed #1; 26.39
#Fit-case 072006b-100ms+800pA-tr-pkbeg eMatch (dfc_trim(1,1)+dfc_pkbeg(10.03)) 1 soma;axon_inode[4] dfc_set_stims_etc(800/1000,26.39-5,5) dfc_sim_BBF() 1:/Volumes/d1/Users/ximing/cNeuro/Data/Grover-2006/072006b/ACSF_20kHz/100ms+800pA-trimmed.htf blMax=4 dfc_set_tgt(800/1000,26.39-5,5)

# Trimmed #2; 37.49
#Fit-case 072006b-100ms+800pA-tr-pkbeg eMatch (dfc_trim(1,1)+dfc_pkbeg(10.03)) 1 soma;axon_inode[4] dfc_set_stims_etc(800/1000,37.49-5,5) dfc_sim_BBF() 2:/Volumes/d1/Users/ximing/cNeuro/Data/Grover-2006/072006b/ACSF_20kHz/100ms+800pA-trimmed.htf blMax=4 dfc_set_tgt(800/1000,37.49-5,5)

#Fit-case 072006b-100ms+400pA-pkbeg eMatch dfc_pkbeg(16.56) 1 soma dfc_set_stims_etc(400/1000,100,5) dfc_sim_BBF() 2:/Volumes/d1/Users/ximing/cNeuro/Data/Grover-2006/072006b/ACSF_20kHz/100ms+400pA.htf blMax=4 dfc_set_tgt(400/1000,100,21,16.56+1+16,16)

#Fit-case 072006b-100ms+200pA-pkbeg eMatch dfc_pkbeg(34.01) 1 soma dfc_set_stims_etc(200/1000,100,5) dfc_sim_BBF() 2:/Volumes/d1/Users/ximing/cNeuro/Data/Grover-2006/072006b/ACSF_20kHz/100ms+200pA.htf blMax=4 dfc_set_tgt(200/1000,100,21,34.01+1+16,16)

#--------------------------------------------------------------------------------
# Passive traces (all 10kHz)
#+750 has no spike; we could use m0; but we want to penalize unwanted spikes
#Fit-case 072006b-2ms+750pA eMatch dfc_eD.DfpwPkdVa(dfc_simL_i.o(0),dfc_tgt_i) 6.4*dfc_PassWgt*100/tstop soma dfc_set_stims_etc(750/1000,2,5);dfc_eD.eta=1 dfc_sim_BBF() 2:/Volumes/d1/Users/ximing/cNeuro/Data/Grover-2006/072006b/ACSF_0kHz/2ms+750pA.htf blMax=4 dfc_set_tgt(750/1000,2,21,136,16)

# m0
Fit-case 072006b-2ms+375pA eMatch dfc_eD.m0(dfc_simL_i.o(0),dfc_tgt_i) 4*dfc_PassWgt*100/tstop soma dfc_set_stims_etc(375/1000,2,5) dfc_sim_BBF() 2:/home/ximi/Projects/ParSims/from_axon_new/htf_files/2ms+375pA.htf blMax=4 dfc_set_tgt(375/1000,2,21,136,16)

# m0 
#Fit-case 072006b-100ms+100pA eMatch dfc_eD.m0(dfc_simL_i.o(0),dfc_tgt_i) 7.9*dfc_PassWgt*100/tstop soma  dfc_set_stims_etc(100/1000,100,5) dfc_sim_BBF() 2:/Volumes/d1/Users/ximing/cNeuro/Data/Grover-2006/072006b/ACSF_20kHz/100ms+100pA.htf blMax=4 dfc_set_tgt(100/1000,100,21,300,16)

#====== 20ms
# m0
Fit-case 072006b-20ms+50pA eMatch dfc_eD.m0(dfc_simL_i.o(0),dfc_tgt_i) 2*dfc_PassWgt*100/tstop soma dfc_set_stims_etc(50/1000,20,5) dfc_sim_BBF() 2:/home/ximi/Projects/ParSims/from_axon_new/htf_files/20ms+50pA.htf blMax=4 dfc_set_tgt(50/1000,20,21,120,16)

# m0
Fit-case 072006b-20ms-50pA eMatch dfc_eD.m0(dfc_simL_i.o(0),dfc_tgt_i) 2*dfc_PassWgt*100/tstop soma dfc_options_all();dfc_set_stims_etc(-50/1000,20,5) dfc_sim_BBF() 2:/home/ximi/Projects/ParSims/from_axon_new/htf_files/20ms-50pA.htf blMax=4 dfc_set_tgt(-50/1000,20,21,120,16)


# m0
Fit-case 072006b-20ms-200pA eMatch dfc_eD.m0(dfc_simL_i.o(0),dfc_tgt_i) 8.3*dfc_PassWgt*100/tstop soma dfc_options_all();dfc_set_stims_etc(-200/1000,20,5) dfc_sim_BBF() 2:/home/ximi/Projects/ParSims/from_axon_new/htf_files/20ms-200pA.htf blMax=4 dfc_set_tgt(-200/1000,20,21,120,16)

#====== 500ms
# m0
#Fit-case 072006b-500ms+50pA eMatch dfc_eD.m0(dfc_simL_i.o(0),dfc_tgt_i) 4.1*dfc_PassWgt*100/tstop soma dfc_set_stims_etc(50/1000,500,21) dfc_sim_BBF() 2:/Volumes/d1/Users/ximing/cNeuro/Data/Grover-2006/072006b/ACSF_0kHz/500ms+50pA.htf blMax=19 dfc_set_tgt(50/1000,500,21,800,0)

# m0
#Fit-case 072006b-500ms-50pA eMatch dfc_eD.m0(dfc_simL_i.o(0),dfc_tgt_i) 3.9*dfc_PassWgt*100/tstop soma dfc_set_stims_etc(-50/1000,500,21) dfc_sim_BBF() 2:/Volumes/d1/Users/ximing/cNeuro/Data/Grover-2006/072006b/ACSF_0kHz/500ms-50pA.htf blMax=19 dfc_set_tgt(-50/1000,500,21,800,0)

# m0
#Fit-case 072006b-500ms-200pA eMatch dfc_eD.m0(dfc_simL_i.o(0),dfc_tgt_i) 12.7*dfc_PassWgt*100/tstop soma dfc_set_stims_etc(-200/1000,500,21) dfc_sim_BBF() 2:/Volumes/d1/Users/ximing/cNeuro/Data/Grover-2006/072006b/ACSF_0kHz/500ms-200pA.htf blMax=19 dfc_set_tgt(-200/1000,500,21,800,0)

# --------------------------------------------------------------------------------
#
# Fit-parm	name			set		fit-lims	

Set-parm	dfc_PassWgt		1		0:1
Set-parm	RmCm_spine_gbar		0		0:1
Set-parm	Spine_number		30000		0:40000
Set-parm 	BL_avg         	   	-74.3052	-80:-60	
Set-parm 	BBF            	         1.60		0:20
Set-parm 	BBFdelay       	         0		0:0.1
Set-parm 	lambda_f_d		0.1		0.1:2
#Set-parm 	G_ena          	      65.4		60:70
#Set-parm 	G_ek           	     -89.5		-95:-85
Set-parm 	G_eh           	       -30		-40:-10
Set-parm 	celsius        	        35		22:37

#Fit-parm	soma_diam_f		1		0.1:3
Fit-parm 	G_Rm           	   	200		10:400
Fit-parm 	G_cm           	  	0.9626	 	0.25:2.5
Fit-parm 	G_Ra           	   	45		2:150
#Set-parm 	G_e_pas        	  	-77.7604	-100:-65

#---------------------------------------------------------------------------
#Set-parm	soma_cm			1.0		0:3
#Set-parm	soma_Rm			40  		1:100
#Set-parm	soma_Ra			100 		1:500
#Set-parm	soma_l			17	 	4:30
#Set-parm	soma_diam		13.5		2:30

#Set-parm	aX_hill_nseg		5	1:100
#Set-parm	aX_hill_l		5	1:50
#Set-parm	aX_hill_d1		4	0.1:50
#Set-parm	aX_hill_d2		1	0.1:50

#Set-parm	aX_iseg_nseg		2	1:100
Set-parm	aX_iseg_n	        2	11:50
#Set-parm	aX_iseg_l		58.30	1:100
#Set-parm	aX_iseg_d		0.5	0.2:1.0

#Set-parm	aX_prox_nseg		11	1:100
#Set-parm	aX_prox_n		3	1:50
#Fit-parm	aX_prox_l		150	10:500
#Fit-parm	aX_prox_d		0.5	0.2:1.0
#Set-parm	aX_prox_l		150	10:500
#Set-parm	aX_prox_d		0.5	0.2:1.0

#Set-parm        aX_inode_n              2       1:50
#Set-parm	aX_inode_d		0.4	0.1:2
#Set-parm	aX_inode_l		1	0.1:5

#Set-parm	aX_mnode_nseg		3	1:100
#Set-parm       aX_mnode_n	        3       1:100 
#Set-parm	aX_mnode_d		0.4	1:100
#Set-parm	aX_mnode_l		100	1:1000

#Set-parm	aX_cm			1.0	0:3
#Set-parm	aX_Rm			40  	1:100
#Set-parm	aX_Ra			100 	1:500

#Set-parm	aXm_cm			0.04	0:1
#Set-parm	aXm_Rm			100	1:500

#--------------------------------------------------------------------------------------
Fit-parm 	Gbar_Naf       	   50			10:300
Set-parm	s0_Gbar_Naf	   500			80:1000
Set-parm	aXh_Gbar_Naf	   500			100:7000
Set-parm        aXi0_Gbar_Naf      2500		        100:8500
Set-parm        aXi1_Gbar_Naf      3500                 100:8000
Set-parm        aXr_Gbar_Naf       3000                 1000:5000
Set-parm        aXm_Gbar_Naf       50                   10:100

Set-parm 	gates_n_Naf_i0 	         1		1:3
Set-parm 	vhalf_n_Naf_i0 	  	-30		-45:-25
Set-parm 	slope_n_Naf_i0 	  	-4.8		-10:-3
Set-parm 	tauA_n_Naf_i0  	   	0.01		0.0001:0.01
Set-parm 	tauG_n_Naf_i0  	  	0.8		0.03:0.97

Set-parm	vhalf_h_Naf_i0		-64		-68:-48
Set-parm	slope_h_Naf_i0		9.06		5:15
Set-parm	tauA_h_Naf_i0		8		5:50
Set-parm	tauG_h_Naf_i0		0.5		0.2:0.8

Set-parm 	gates_n_Naf_i1 	         1		1:3
Set-parm 	vhalf_n_Naf_i1 	  	-35		-58:-35
Set-parm 	slope_n_Naf_i1 	  	-5		-10:-3
Set-parm 	tauA_n_Naf_i1  	   	0.01		0.0001:0.01
Set-parm 	tauG_n_Naf_i1  	  	0.5		0.03:0.97

Set-parm	vhalf_h_Naf_i1		-67		-68:-55
Set-parm	slope_h_Naf_i1		9		3:15
Set-parm	tauA_h_Naf_i1		8		5:50
Set_parm	tauG_h_Naf_i1		0.5		0.2:0.8


#---------------------------------------------------------------------------------
Fit-parm 	Gbar_KDR		28		10:1000
Set-parm	s0_Gbar_KDR	        200	    	80:7000
Set-parm	aXh_Gbar_KDR		200		100:7000
Set-parm 	aXi0_Gbar_KDR      	1500		100:7000
Set-parm 	aXi1_Gbar_KDR   	2000		100:7000
Set-parm 	aXm_Gbar_KDR   	  	5		0.1:100
Set-parm 	aXr_Gbar_KDR   	   	800		10:1000
Set-parm	Gbar_KDR_dslope		0		0:0.008

Set-parm 	gates_n_KDR_i1 	         1		1:4
Set-parm 	vhalf_n_KDR_i1 	   	2		-19:10
Set-parm 	slope_n_KDR_i1 	  	-13		-15:-6
Set-parm 	tauA_n_KDR_i1  	   	8		1:50
Set-parm 	tauG_n_KDR_i1  	  	0.9		0.03:0.97

#---------------------------------------------------------------------------------

Fit-parm        Gbar_KA                2              1:100
Set-parm	vhalf_n_KA_i1         -30	         -35:5
Set-parm        slope_n_KA_i1         -10              -40:-5
Set-parm        tauA_n_KA_i1           1               0.1:30
Set-parm        vhalfD_h_KA_i1	      -35              -60:-20
Set-parm        slope_h_KA_i1          10                3:20
Set-parm        tauA_h_KA_i1           20               31:150
Set-parm        Gbar_KA_dslope         0.008           0.0001:0.03

#---------------------------------------------------------------------------------
Fit-parm 	Gbar_h    	  	0.1058		0.01:4
Set-parm 	Gbar_h_dslope  	     0.008		0.0001:0.03
Set-parm 	gates_n_h_i0   	         1		1:3
Set-parm 	vhalf_n_h_i0   	  	-92.07		-110:-70
Set-parm 	slope_n_h_i0   	   	10		4:12
Set-parm 	tauA_n_h_i0    	   	100		10:100
Set-parm 	tau0_n_h_i0    	     0.001		0.001:0.1
Set-parm 	tauF_n_h_i0    	         0		-3.5:2
Set-parm 	tauG_n_h_i0    	  	0.5		0.05:0.95
Set-parm 	tauDv_n_h_i0   	   	0		-55:55

------end_pDE_spec--------------------------------------------------------------------
  n   G_Rm   G_cm   G_Ra Gbar_Naf Gbar_KDR Gbar_KA Gbar_h cost-total 072006b-2ms+375pA 072006b-20ms+50pA 072006b-20ms-50pA 072006b-20ms-200pA 
nextGen gen_N 0 2015-01-28 20:27:24 ----------
  n   G_Rm   G_cm   G_Ra Gbar_Naf Gbar_KDR Gbar_KA Gbar_h cost-total 072006b-2ms+375pA 072006b-20ms+50pA 072006b-20ms-50pA 072006b-20ms-200pA 
  0 305.5387101 2.264084937 64.23748247 94.70209045 762.7241581 56.12729988 0.6546363563      1e+90 9.03e-317 9.03e-317 9.03e-317 9.03e-317 9.03e-317 sec 
  1 116.139414 0.6778290312 62.85053571 286.8466347 826.2541943 12.75670685 2.258514566      1e+90 9.03e-317 9.03e-317 9.03e-317 9.03e-317 9.03e-317 sec 
  2 126.4885687 0.3399665759 9.862306174 179.6026093 923.9128898 3.398883858 3.863582048      1e+90      0 1.63e-322 9.06e-317 9.06e-317 3.95e-322 sec 
  3 347.6326575 0.5482187121 9.737493299 75.57828136 611.5117556 63.76723842 0.09187571309      1e+90      0 1.63e-322 9.06e-317 9.07e-317 3.95e-322 sec 
  4 266.2990143 1.919333721 80.44508031 91.33684228 929.6858434 72.10981338 0.128963833      1e+90      0 1.63e-322 9.07e-317 9.07e-317 3.95e-322 sec 
  5 233.032285 1.337210652 104.6120009 68.82367579 229.6278349 74.3553535 2.343852819      1e+90      0      0      0      0 5.58e-322 sec 
  6 199.941237 1.831251941 90.33990429 201.005328 37.47566317 17.30453741 3.555521299      1e+90      0      0      0      0 5.58e-322 sec 
  7 68.67000353 1.612914376 6.444135202 121.5166467 691.1973477 33.96346796 1.87942279      1e+90      0      0      0      0 5.58e-322 sec 
  8 50.73514483 1.472433776 77.70316151 292.6820438 240.1403629 97.08316948 3.244426596      1e+90      0      0      0      0 5.58e-322 sec 
  9 31.10555136 2.035001822 132.6264421 49.50946077 98.84241086 95.74327611 2.197900571      1e+90      0      0      0      0 5.58e-322 sec 
 10 117.7475141 1.357937005 105.6676522 211.4092686 942.726023 49.68309342 0.285505562      1e+90      0      0      0      0 5.58e-322 sec 
 11 137.9359218 2.274284527 30.57196503 27.39837329 603.1578472 87.71267586 2.942033881      1e+90      0      0      0      0 5.58e-322 sec 
 12 355.0717352 1.844628423 15.28515909 139.5661507 632.0092508 3.028790954 0.03235788662      1e+90      0      0      0      0 5.58e-322 sec 
 13 168.7708893 0.9122503706 24.78012739 120.032877 594.2902293 55.37455942 3.017007168      1e+90 9.03e-317 9.03e-317 9.03e-317 9.03e-317 9.03e-317 sec 
 14 13.25966712 2.131999071 126.9726338 172.3689328 554.522299 50.7432841 0.880471304      1e+90 9.03e-317 9.03e-317 9.03e-317 9.03e-317 9.03e-317 sec 
 15 166.0529797 0.5317976991 7.05348739 226.2480613 939.9950269 55.25775634 0.9667756752      1e+90 9.03e-317 9.03e-317 9.03e-317 9.03e-317 9.03e-317 sec 
 16 325.5895013 0.6146802341 48.04726287 26.07480268 255.9056035 76.5435863 1.294442021      1e+90 9.03e-317 9.03e-317 9.03e-317 9.03e-317 9.03e-317 sec 
 17 277.6172168 0.6272860729 2.690135009 256.2400555 310.9592393 35.85976432 3.984201516      1e+90 9.03e-317 9.03e-317 9.03e-317 9.03e-317 9.03e-317 sec 
 18 263.8440788 0.5105478432 137.1843122 168.3283486 86.93733345 25.3525142 3.781348669      1e+90 3.95e-323 4.45e-323 4.94e-323 5.43e-323 6.42e-323 sec 
 19 27.01382688 2.017872881 61.86541041 105.989741 152.6699992 87.67481829 1.605042096      1e+90 9.03e-317 9.03e-317 9.03e-317 9.03e-317 9.03e-317 sec 
 20 250.2649196 0.9790607455 132.5813187 202.5239711 448.4075022 75.93352951 0.8638038628      1e+90 9.06e-317      0      0      0 2.37e-322 sec 
 21 134.3330575 1.875802066 44.19359817 127.2990192 452.8930412 85.08085251 3.661112391      1e+90 9.03e-317 9.03e-317 9.03e-317 9.03e-317 9.03e-317 sec 
 22 66.61277438 2.114240962 38.98816068 168.7458985 494.7993037 34.33449752 2.630562693      1e+90 9.06e-317      0      0      0 2.37e-322 sec 
 23 100.8941239 1.892374171 128.7404162 170.9498481 216.8900744 57.61033254 2.75213758      1e+90 9.03e-317 9.03e-317 9.03e-317 9.03e-317 9.03e-317 sec 
 24 154.5609488 2.389092514 23.80612654 43.59994104 762.462708 73.06319796 3.3893811      1e+90 9.06e-317      0      0      0 2.37e-322 sec 
 25 139.9125395 1.550516013 106.649498 270.6845104 887.1088001 79.70869959 1.782323782      1e+90 9.03e-317 9.03e-317 9.03e-317 9.03e-317 9.03e-317 sec 
 26 229.7476709 1.839230072 93.86316199 190.250606 794.1442617 44.93582807 3.676965263      1e+90 9.06e-317      0      0      0 2.37e-322 sec 
 27 193.7722392 1.940022026 105.0313247 47.42359803 579.6646956 64.55576763 3.270701215      1e+90 9.03e-317 9.03e-317 9.03e-317 9.03e-317 9.03e-317 sec 
 28 181.0588248 0.3984445285 108.0580418 109.1857861 630.3317608 13.83321056 0.5473178546      1e+90 9.06e-317      0      0      0 2.37e-322 sec 
 29 78.2540841 0.6288417499 80.58555462 282.5861143 56.56578322 58.3276387 0.5075519984      1e+90 9.03e-317 9.03e-317 9.03e-317 9.03e-317 9.03e-317 sec 
 30 154.567965 1.545596042 54.03043872 123.9735886 458.5376791 76.40545727 2.957037032      1e+90 9.06e-317      0      0      0 2.37e-322 sec 
 31 209.807149 0.2788518265 16.60100759 51.37617236 384.0318591 67.51197484 2.993449657      1e+90 9.03e-317 9.03e-317 9.03e-317 9.03e-317 9.03e-317 sec 
 32 39.2873212 1.223380787 74.90742658 101.9131472 238.798395 21.89689882 3.232769661      1e+90 9.06e-317      0      0      0 2.37e-322 sec 
 33 50.55730474 0.9390223172 111.2409192 236.621702 452.9385301 55.20856179 0.1477441404      1e+90 1.58e-322 3.95e-322 9.04e-317      0 1.11e-321 sec 
 34 253.1722304 1.075367594 109.3327218 92.79979371 665.8090106 48.90390237 3.433041048      1e+90      0 5.58e-322 9.05e-317 2.35e-310 3.95e-322 sec 
 35 310.6609736 1.456008965 72.91525346 258.7270601 783.5698279 30.73776301 2.89431107      1e+90 1.58e-322 3.95e-322 9.04e-317      0 1.11e-321 sec 
 36 313.5139119 2.367842614 126.165558 255.894718 207.8216141 14.7783345 0.3151991494      1e+90      0 5.58e-322 9.05e-317 2.35e-310 3.95e-322 sec 
 37 226.1050462 0.7317871761 23.1044298 263.129372 371.9946746 61.74519728 1.08072613      1e+90 1.58e-322 3.95e-322 9.04e-317      0 1.11e-321 sec 
 38 57.94947697 2.217478846 20.39163832 294.248789 150.0225383 18.52412777 1.958861493      1e+90      0 5.58e-322 9.05e-317 2.35e-310 3.95e-322 sec 
 39 33.53081331 2.247468665 136.8652113 226.4753586 704.8770934 69.33799711 0.6675858292      1e+90 1.58e-322 3.95e-322 9.04e-317      0 1.11e-321 sec 
 40 103.5342644 0.5918488697 137.7390194 88.29336972 737.5881063 49.6654701 3.393316061      1e+90      0 5.58e-322 9.05e-317 2.35e-310 3.95e-322 sec 
 41 165.7040738 2.262757523 86.33756599 192.0509021 122.303257 63.63981668 1.567422249      1e+90 1.58e-322 3.95e-322 9.04e-317      0 1.11e-321 sec 
 42 291.6090083 2.470647164 66.14235789 187.1688779 46.17759791 68.85223368 0.1832462169      1e+90      0 5.58e-322 9.05e-317 2.35e-310 3.95e-322 sec 
 43 241.2458819 0.5603921658 135.3331142 162.4224911 672.4731239 12.92941452 0.2728057582      1e+90 1.58e-322 3.95e-322 9.03e-317      0 1.11e-321 sec 
 44 117.45641 0.5447363366 82.35313915 43.72889445 470.230637 14.72890338 2.007107192      1e+90      0 5.58e-322 9.05e-317 2.35e-310 3.95e-322 sec 
 45 138.0876938 2.313890959 108.6723568 67.78949567 479.1709196 97.62626129 3.304039898      1e+90 1.26e-321 3.95e-322 9.03e-317      0 1.11e-321 sec 
 46 76.54628666 0.8385547382 32.21942401 163.8011581 311.5438936 48.40994779 0.8473426341      1e+90      0 5.58e-322 9.05e-317 2.35e-310 3.95e-322 sec 
 47 209.7224773 0.6859032513 52.39333405 283.8978247 568.7417254 81.38461512 1.83736023      1e+90 2.39e-312 3.95e-322 9.03e-317      0 1.11e-321 sec 
 48 306.608121 0.4519502357 20.76597173 128.5282681 473.4565358 2.870710979 2.410526019      1e+90      0 5.58e-322 9.05e-317 2.35e-310 3.95e-322 sec 
 49 346.898343 1.234131069 64.26032292 21.84069752 28.25995632 65.05161613 0.4264002731      1e+90      0      0      0      0      0 sec 
 50 117.4946953 1.839297434 54.04323672 68.59851932 50.07102065 17.19100734 2.241828541      1e+90      0      0      0      0      0 sec 
 51 81.6752769 2.241212008 112.5965789 165.3975581 441.9947164 45.47945144 1.200084968      1e+90      0      0      0      0      0 sec 
 52 41.29333588 1.455445948 120.6674639 226.7761378 862.6093855 25.13794593 3.726758399      1e+90      0      0      0      0      0 sec 
 53 196.4116897 0.5005050006 135.8862227 258.9391839 66.81262401 32.67310805 0.4321859198      1e+90      0      0      0      0      0 sec 
 54 210.4890687 2.341277624 77.13295617 270.8175632 260.9796492 34.40987083 0.5534879255      1e+90      0      0      0      0      0 sec 
 55 334.9486951 1.273482576 80.24340418 246.4241328 929.8753009 20.50840773 1.925293841      1e+90      0      0      0      0      0 sec 
 56 307.8600372 0.6664089094 13.71213756 280.8874485 684.9749004 35.94588783 0.3883060741      1e+90      0      0      0      0      0 sec 
 57 100.9664351 2.310502358 58.7094471 128.2243516 275.6134958 99.22370212 3.218782948      1e+90      0      0      0      0      0 sec 
 58 161.8924288 1.015439054 27.81700912 208.6883876 184.2180816 75.89359487 2.197147371      1e+90      0      0      0      0      0 sec 
 59 219.1537102 0.7557777884 131.665499 163.1925375 618.7515831 99.00493214 1.817672614      1e+90      0      0      0      0      0 sec 
 60 13.42334037 2.100724072 45.78262807 201.8979946 245.5164669 42.66965798 0.01257008253      1e+90      0      0      0      0      0 sec 
 61 236.9304465 2.129203328 118.1041605 181.7347566 57.07756917 11.46258546 3.75621891      1e+90      0      0      0      0      0 sec 
 62 389.0028578 1.417617999 101.1173116 115.2247378 536.4995157 24.18364602 3.512825504      1e+90      0      0      0      0      0 sec 
 63 393.2899366 0.2562443551 82.3249724 266.2338552 239.6739634 98.68458718 1.09267675      1e+90      0      0      0      0      0 sec 
 64 382.3998724 0.8851785453 131.836087 164.6369153 714.5364906 27.95552995 3.104902796      1e+90      0      0      0      0      0 sec 
 65 87.57009204 0.3038804761 2.68573164 97.42966277 870.1112708 42.13050683 3.322919117      1e+90      0      0      0      0      0 sec 
 66 240.0324992 2.414175953 109.4938314 272.1981585 787.7957938 43.15279443 2.365354376      1e+90      0      0      0      0      0 sec 
 67 135.592477 1.345150454 65.21034018 205.6069055 866.3403913 85.14096175 1.936440425      1e+90      0      0      0      0      0 sec 
 68 321.7735259 1.839646113 41.74681794 122.5991564 769.1456315 92.91677298 0.700603394      1e+90      0      0      0      0      0 sec 
 69 53.31124712 1.149910297 34.67378715 18.07684762 860.1087785 12.84211765 2.213033117      1e+90      0      0      0      0      0 sec 
end_nextGen gen_N    0 2015-01-28 20:27:24 nWin   0     0% avg_imprv     0% cost-best        0 cost-total-avg    1e+90 time_eavg   0   0
        Correlations ---|
                G_Rm   0|  20
                G_cm   1|  10  -3
                G_Ra   2|   6  -0  21
            Gbar_Naf   3|  15 -10  11  15
            Gbar_KDR   4|  12  -5   8  18  -7
             Gbar_KA   5|  13   0  12   9  -4   0
              Gbar_h   6|  13  -4  14  16  -2  -9  -5
     EndCorrelations ---|   0   1   2   3   4   5   6 |---
                      Fit-parm      bst_evr      bst_gen       median          SDr     CVr%         mean           SD      CV%        min        max       lims
                   dfc_PassWgt            1
               RmCm_spine_gbar            0
                  Spine_number        30000
                        BL_avg     -74.3052
                           BBF          1.6
                      BBFdelay            0
                    lambda_f_d          0.1
                          G_eh          -30
                       celsius           35
                          G_Rm            0      305.539      166.053      124.853    75.19      182.857       105.86    57.89    13.2597     393.29         10:400       
                          G_cm            0      2.26408      1.35794      1.00382    73.92      1.38211     0.699097    50.58   0.256244    2.47065       0.25:2.5       
                          G_Ra            0      64.2375      74.9074      51.2778    68.45      73.4099      42.4646    57.85    2.68573    137.739          2:150       
                     aX_iseg_n            2
                      Gbar_Naf            0      94.7021      165.398       94.122    56.91      163.383      80.7046    49.40    18.0768    294.249         10:300       
                   s0_Gbar_Naf          500
                  aXh_Gbar_Naf          500
                 aXi0_Gbar_Naf         2500
                 aXi1_Gbar_Naf         3500
                  aXr_Gbar_Naf         3000
                  aXm_Gbar_Naf           50
                gates_n_Naf_i0            1
                vhalf_n_Naf_i0          -30
                slope_n_Naf_i0         -4.8
                 tauA_n_Naf_i0         0.01
                 tauG_n_Naf_i0          0.8
                vhalf_h_Naf_i0          -64
                slope_h_Naf_i0         9.06
                 tauA_h_Naf_i0            8
                 tauG_h_Naf_i0          0.5
                gates_n_Naf_i1            1
                vhalf_n_Naf_i1          -35
                slope_n_Naf_i1           -5
                 tauA_n_Naf_i1         0.01
                 tauG_n_Naf_i1          0.5
                vhalf_h_Naf_i1          -67
                slope_h_Naf_i1            9
                 tauA_h_Naf_i1            8
                      Gbar_KDR            0      762.724      479.171      355.078    74.10      491.412      284.434    57.88      28.26    942.726         10:1000      
                   s0_Gbar_KDR          200
                  aXh_Gbar_KDR          200
                 aXi0_Gbar_KDR         1500
                 aXi1_Gbar_KDR         2000
                  aXm_Gbar_KDR            5
                  aXr_Gbar_KDR          800
               Gbar_KDR_dslope            0
                gates_n_KDR_i1            1
                vhalf_n_KDR_i1            2
                slope_n_KDR_i1          -13
                 tauA_n_KDR_i1            8
                 tauG_n_KDR_i1          0.9
                       Gbar_KA            0      56.1273      49.6831      36.0725    72.61      51.1149      28.1088    54.99    2.87071    99.2237          1:100       
                 vhalf_n_KA_i1          -30
                 slope_n_KA_i1          -10
                  tauA_n_KA_i1            1
                vhalfD_h_KA_i1          -35
                 slope_h_KA_i1           10
                  tauA_h_KA_i1           20
                Gbar_KA_dslope        0.008
                        Gbar_h            0     0.654636      1.95886      1.86549    95.23       1.9677      1.24988    63.52  0.0125701     3.9842       0.01:4         
                 Gbar_h_dslope        0.008
                  gates_n_h_i0            1
                  vhalf_n_h_i0       -92.07
                  slope_n_h_i0           10
                   tauA_n_h_i0          100
                   tau0_n_h_i0        0.001
                   tauF_n_h_i0            0
                   tauG_n_h_i0          0.5
                  tauDv_n_h_i0            0
--------------------
                    cost-total            0        1e+90        1e+90            0     0.00        1e+90  2.27789e+74     0.00      1e+90      1e+90
             072006b-2ms+375pA            0 9.02831e-317            0            0     0.00 3.41087e-314            0     0.00          0 2.38571e-312
             072006b-20ms+50pA            0 9.02962e-317            0            0     0.00 1.80596e-317            0     0.00          0 9.03024e-317
             072006b-20ms-50pA            0 9.03077e-317            0            0     0.00 4.26205e-317            0     0.00          0 9.06701e-317
            072006b-20ms-200pA            0  9.0318e-317            0            0     0.00 2.69081e-311            0     0.00          0 2.35446e-310
                  elapsed-time            0 9.03406e-317 3.95253e-322 5.87938e-322     0.00 1.80685e-317            0     0.00          0 9.03463e-317
      random.n_count 490
